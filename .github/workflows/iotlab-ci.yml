name: iotlab-ci

# Run 'compile_and_test_for_board.py' on IoT-LAB boards.
#
# This workflow will launch all tests on a list of IoT-LAB boards.
#
# This workflow is only run periodically on master with a cron and on new
# pushed release candidates tags.

on:
  # Schedule weekly runs Sunday at 00:00 on master
  schedule:
    - cron: '00 0 * * 0'
  push:
    # TODO: remove master branch, only used here as demonstrator
    branches:
      - master
    # Run on all new release candidates tags
    tags:
      - '*-RC*'

jobs:
  # Runs all tests on IoT-LAB boards
  compile_and_test_for_board:
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        boards:
          - '{"riot": "iotlab-m3", "iotlab": "m3:at86rf231", "site": "saclay"}'
          - '{"riot": "nrf51dk", "iotlab": "nrf51dk:ble", "site": "saclay"}'
          - '{"riot": "nrf52832-mdk", "iotlab": "nrf52832mdk:ble", "site": "saclay"}'
          - '{"riot": "samr21-xpro", "iotlab": "samr21:at86rf233", "site": "saclay"}'
          - '{"riot": "b-l072z-lrwan1", "iotlab": "st-lrwan1:sx1276", "site": "saclay"}'
          - '{"riot": "b-l475e-iot01a", "iotlab": "st-iotnode:multi", "site": "saclay"}'
    runs-on: ubuntu-latest
    name: ${{ fromJson(matrix.boards).riot }}
    env:
      IOTLAB_NODE: auto-ssh
      BUILD_IN_DOCKER: 1
      # Force .bin file generation because these files are used to flash on IoT-LAB
      DOCKER_ENVIRONMENT_CMDLINE: -e BUILD_FILES=\$$\(BINFILE\)
      COMPILE_AND_TEST_FOR_BOARD: ./dist/tools/compile_and_test_for_board/compile_and_test_for_board.py
      COMPILE_AND_TEST_ARGS: --with-test-only --jobs=2
    steps:
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install iotlabcli pexpect
      - name: Configure credentials
        run: echo '${{ secrets.IOTLABRC }}' > ~/.iotlabrc
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.4.0
        with:
          ssh-private-key: ${{ secrets.IOTLAB_PRIVATE_KEY }}
      - name: Fetch host key from IoT-LAB ${{ fromJson(matrix.boards).site }} site
        run: |
          IOTLAB_USER=$(cat ~/.iotlabrc | cut -f1 -d:)
          ssh -oStrictHostKeyChecking=accept-new \
          ${IOTLAB_USER}@${{ fromJson(matrix.boards).site }}.iot-lab.info exit
      - name: Pull riotbuild docker image
        run: |
          docker pull riot/riotbuild:latest
      - name: Checkout RIOT
        uses: actions/checkout@v2
      - name: Launch IoT-LAB experiment
        run: |
          IOTLAB_EXP_ID=$(iotlab-experiment --jmespath="id" submit \
            -n "riot-ci-${{ fromJson(matrix.boards).riot }}" -d 360 \
            -l 1,site=${{ fromJson(matrix.boards).site }}+archi=${{ fromJson(matrix.boards).iotlab }})
          iotlab-experiment wait -i ${IOTLAB_EXP_ID}
          echo "::set-env name=IOTLAB_EXP_ID::${IOTLAB_EXP_ID}"
      - name: Run compile_and_test_for_board.py
        run: |
          ${COMPILE_AND_TEST_FOR_BOARD} . ${{ fromJson(matrix.boards).riot }} \
            results-${{ fromJson(matrix.boards).riot }} ${COMPILE_AND_TEST_ARGS}
      - name: Stop IoT-LAB experiment
        if: always()
        run: iotlab-experiment stop -i ${IOTLAB_EXP_ID}
      - name: Archive results
        if: always()
        # Store all generated results to same 'results' artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ fromJson(matrix.boards).riot }}
          path: results-${{ fromJson(matrix.boards).riot }}
