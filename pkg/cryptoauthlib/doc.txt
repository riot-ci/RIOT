/**
 * @defgroup pkg_cryptoauthlib cryptoauthlib security crypto 
 * @ingroup  pkg
 * @brief    Provides the library for Microchip CryptoAuth devices
 * @see      https://github.com/MicrochipTech/cryptoauthlib
 *
 * # Introduction
 *
 * This package provides the official library for Microchip CryptoAuth devices.
 *
 *
 * ## Warning
 *
 * Some functions can only be used, when the data, config and otp zones of the 
 * device are locked. Locking is permanent and cannot be undone. Be careful if 
 * you're not sure you've configured everything correctly.
 * For more information I recommend reading the data sheet of the device. 
 *
 *
 * ## Usage
 *
 * Add
 * USEPKG += cryptoauthlib
 * to your Makefile.
 *
 *
 * ## Implementation status
 *
 * This implementation was partly tested with the ATECC508A. We haven't tested the 
 * functions that require locking the device, yet. There's a wrapper in the 
 * cryptoauthlib/contrib folder, which implements most of the HAL functions.
 * Currently the functions hal_i2c_discover_devices and hal_i2c_discover_buses 
 * are unimplemented, as well as hal_i2c_post_init.
 * 
 * The library provides a basic interface. It implements high level functions for 
 * the use of standard configurations and defaults. It is easy to use and recommended
 * for understanding the basic usage and operational flow of the library.
 *
 *
 * ## Tests
 * 
 * The library provides unittests for the library functions. Instead of writing our 
 * own, we're working on including them in Riot (not fully implemented, yet). There 
 * is a directory called "pkg_cryptoauthlib_internal_tests" in the Riot testfolder 
 * which runs part of the unittests.
 * Some of the provided tests can only be run when the config, data and/or otp zones * of the device are locked. Some tests (but not all) will automatically lock zones * as needed. Zones can only be locked permanently. Unlocking is not possible!
 * Also there is a test for comparing the runtime of the Riot software implementation
 * and the CryptoAuth hardware implementation for calculating a SHA-256.
 * Currently the hardware is much slower than the software implementation, because 
 * the way we implemented the function to wake up the device takes a very long time. 
 * We're working on fixing this. 
 *
 * ### Time measurements SHA-256:
 * 
 * Riot software implementation: 27 ms
 * ATECC508A: 51 ms
 * Wake up call takes 19 ms and gets called twice, so overhead is 38 ms 
 */
